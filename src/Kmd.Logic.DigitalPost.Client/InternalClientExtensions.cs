// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.DigitalPost.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for InternalClient.
    /// </summary>
    internal static partial class InternalClientExtensions
    {
            /// <summary>
            /// Sends a single text message to a citizen/company.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='request'>
            /// Request body
            /// </param>
            public static object SendMessage(this IInternalClient operations, System.Guid subscriptionId, SendMessageRequest request = default(SendMessageRequest))
            {
                return operations.SendMessageAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a single text message to a citizen/company.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='request'>
            /// Request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendMessageAsync(this IInternalClient operations, System.Guid subscriptionId, SendMessageRequest request = default(SendMessageRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendMessageWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a single document to a citizen/company.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='request'>
            /// Request body
            /// </param>
            public static object SendDocument(this IInternalClient operations, System.Guid subscriptionId, SendDocumentRequest request = default(SendDocumentRequest))
            {
                return operations.SendDocumentAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a single document to a citizen/company.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='request'>
            /// Request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendDocumentAsync(this IInternalClient operations, System.Guid subscriptionId, SendDocumentRequest request = default(SendDocumentRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendDocumentWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a single file that could be add as an attachment to the message
            /// later.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='attachment'>
            /// File added to message
            /// </param>
            public static UploadAttachmentResponse UploadAttachment(this IInternalClient operations, System.Guid subscriptionId, Stream attachment)
            {
                return operations.UploadAttachmentAsync(subscriptionId, attachment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a single file that could be add as an attachment to the message
            /// later.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='attachment'>
            /// File added to message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UploadAttachmentResponse> UploadAttachmentAsync(this IInternalClient operations, System.Guid subscriptionId, Stream attachment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadAttachmentWithHttpMessagesAsync(subscriptionId, attachment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the consent to send a single document to a citizen/company.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalPostConfigurationId'>
            /// DigitalPost provider configuration Id
            /// </param>
            /// <param name='request'>
            /// Request body
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IDictionary<string, IList<string>> GetConsent(this IInternalClient operations, System.Guid digitalPostConfigurationId, SendConsentPayloadRequest request, string subscriptionId)
            {
                return operations.GetConsentAsync(digitalPostConfigurationId, request, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the consent to send a single document to a citizen/company.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalPostConfigurationId'>
            /// DigitalPost provider configuration Id
            /// </param>
            /// <param name='request'>
            /// Request body
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, IList<string>>> GetConsentAsync(this IInternalClient operations, System.Guid digitalPostConfigurationId, SendConsentPayloadRequest request, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConsentWithHttpMessagesAsync(digitalPostConfigurationId, request, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves digital post configuration provider assigned to the logic
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='configurationId'>
            /// Id of Digital Post configuration provider
            /// </param>
            public static object GetDigitalPostConfiguration(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId)
            {
                return operations.GetDigitalPostConfigurationAsync(subscriptionId, configurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves digital post configuration provider assigned to the logic
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='configurationId'>
            /// Id of Digital Post configuration provider
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDigitalPostConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, System.Guid configurationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDigitalPostConfigurationWithHttpMessagesAsync(subscriptionId, configurationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves digital post configuration providers assigned to the logic
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            public static IList<DigitalPostProviderConfigurationModel> GetAllDigitalPostConfigurations(this IInternalClient operations, System.Guid subscriptionId)
            {
                return operations.GetAllDigitalPostConfigurationsAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves digital post configuration providers assigned to the logic
            /// subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DigitalPostProviderConfigurationModel>> GetAllDigitalPostConfigurationsAsync(this IInternalClient operations, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllDigitalPostConfigurationsWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates existing Doc2Mail configuration and upload certificate files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='systemId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='certificate'>
            /// </param>
            public static object UpdateDoc2MailConfiguration(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), int? systemId = default(int?), string name = default(string), string environment = default(string), string callbackUrl = default(string), Stream certificate = default(Stream))
            {
                return operations.UpdateDoc2MailConfigurationAsync(subscriptionId, id, systemId, name, environment, callbackUrl, certificate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates existing Doc2Mail configuration and upload certificate files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='systemId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateDoc2MailConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), int? systemId = default(int?), string name = default(string), string environment = default(string), string callbackUrl = default(string), Stream certificate = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDoc2MailConfigurationWithHttpMessagesAsync(subscriptionId, id, systemId, name, environment, callbackUrl, certificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds Doc2Mail configuration and upload certificate files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='systemId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='certificate'>
            /// </param>
            public static object CreateDoc2MailConfiguration(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), int? systemId = default(int?), string name = default(string), string environment = default(string), string callbackUrl = default(string), Stream certificate = default(Stream))
            {
                return operations.CreateDoc2MailConfigurationAsync(subscriptionId, id, systemId, name, environment, callbackUrl, certificate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds Doc2Mail configuration and upload certificate files.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='systemId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateDoc2MailConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), int? systemId = default(int?), string name = default(string), string environment = default(string), string callbackUrl = default(string), Stream certificate = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDoc2MailConfigurationWithHttpMessagesAsync(subscriptionId, id, systemId, name, environment, callbackUrl, certificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates existing eboks configuration and upload certificate file to the
            /// Azure Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='systemId'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            public static object UpdateEboksConfiguration(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), int? systemId = default(int?), string environment = default(string), string callbackUrl = default(string), string name = default(string), Stream certificate = default(Stream), string certificatePassword = default(string))
            {
                return operations.UpdateEboksConfigurationAsync(subscriptionId, id, systemId, environment, callbackUrl, name, certificate, certificatePassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates existing eboks configuration and upload certificate file to the
            /// Azure Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='systemId'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateEboksConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), int? systemId = default(int?), string environment = default(string), string callbackUrl = default(string), string name = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateEboksConfigurationWithHttpMessagesAsync(subscriptionId, id, systemId, environment, callbackUrl, name, certificate, certificatePassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds existing eboks configuration and upload certificate file to the Azure
            /// Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='systemId'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            public static object CreateEboksConfiguration(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), int? systemId = default(int?), string environment = default(string), string callbackUrl = default(string), string name = default(string), Stream certificate = default(Stream), string certificatePassword = default(string))
            {
                return operations.CreateEboksConfigurationAsync(subscriptionId, id, systemId, environment, callbackUrl, name, certificate, certificatePassword).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds existing eboks configuration and upload certificate file to the Azure
            /// Key Vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='systemId'>
            /// </param>
            /// <param name='environment'>
            /// Possible values include: 'production', 'test'
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='certificate'>
            /// </param>
            /// <param name='certificatePassword'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateEboksConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), int? systemId = default(int?), string environment = default(string), string callbackUrl = default(string), string name = default(string), Stream certificate = default(Stream), string certificatePassword = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEboksConfigurationWithHttpMessagesAsync(subscriptionId, id, systemId, environment, callbackUrl, name, certificate, certificatePassword, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds fake provider configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static object UpdateFakeConfiguration(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), string callbackUrl = default(string), string name = default(string))
            {
                return operations.UpdateFakeConfigurationAsync(subscriptionId, id, callbackUrl, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds fake provider configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateFakeConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), string callbackUrl = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFakeConfigurationWithHttpMessagesAsync(subscriptionId, id, callbackUrl, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds fake provider configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static object CreateFakeConfiguration(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), string callbackUrl = default(string), string name = default(string))
            {
                return operations.CreateFakeConfigurationAsync(subscriptionId, id, callbackUrl, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds fake provider configuration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Id of LoGIC subscription
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='callbackUrl'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateFakeConfigurationAsync(this IInternalClient operations, System.Guid subscriptionId, string id = default(string), string callbackUrl = default(string), string name = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFakeConfigurationWithHttpMessagesAsync(subscriptionId, id, callbackUrl, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
